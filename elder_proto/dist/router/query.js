// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: elder/router/query.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";
import { QueryRollTxList } from "./roll_txs";
export const protobufPackage = "elder.router";
function createBaseQueryParamsRequest() {
    return {};
}
export const QueryParamsRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return QueryParamsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
export const QueryParamsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.params !== undefined) {
            Params.encode(message.params, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = Params.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return QueryParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = (object.params !== undefined && object.params !== null)
            ? Params.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseQueryTxListRequest() {
    return { rollId: 0, startBlock: 0, endBlock: 0 };
}
export const QueryTxListRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.rollId !== 0) {
            writer.uint32(8).uint64(message.rollId);
        }
        if (message.startBlock !== 0) {
            writer.uint32(16).int64(message.startBlock);
        }
        if (message.endBlock !== 0) {
            writer.uint32(24).int64(message.endBlock);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTxListRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.rollId = longToNumber(reader.uint64());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.startBlock = longToNumber(reader.int64());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.endBlock = longToNumber(reader.int64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rollId: isSet(object.rollId) ? globalThis.Number(object.rollId) : 0,
            startBlock: isSet(object.startBlock) ? globalThis.Number(object.startBlock) : 0,
            endBlock: isSet(object.endBlock) ? globalThis.Number(object.endBlock) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rollId !== 0) {
            obj.rollId = Math.round(message.rollId);
        }
        if (message.startBlock !== 0) {
            obj.startBlock = Math.round(message.startBlock);
        }
        if (message.endBlock !== 0) {
            obj.endBlock = Math.round(message.endBlock);
        }
        return obj;
    },
    create(base) {
        return QueryTxListRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseQueryTxListRequest();
        message.rollId = (_a = object.rollId) !== null && _a !== void 0 ? _a : 0;
        message.startBlock = (_b = object.startBlock) !== null && _b !== void 0 ? _b : 0;
        message.endBlock = (_c = object.endBlock) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseQueryTxListResponse() {
    return { rollId: 0, txs: [], currentHeight: 0 };
}
export const QueryTxListResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.rollId !== 0) {
            writer.uint32(8).uint64(message.rollId);
        }
        for (const v of message.txs) {
            QueryRollTxList.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.currentHeight !== 0) {
            writer.uint32(24).int64(message.currentHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTxListResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.rollId = longToNumber(reader.uint64());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.txs.push(QueryRollTxList.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.currentHeight = longToNumber(reader.int64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rollId: isSet(object.rollId) ? globalThis.Number(object.rollId) : 0,
            txs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.txs) ? object.txs.map((e) => QueryRollTxList.fromJSON(e)) : [],
            currentHeight: isSet(object.currentHeight) ? globalThis.Number(object.currentHeight) : 0,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.rollId !== 0) {
            obj.rollId = Math.round(message.rollId);
        }
        if ((_a = message.txs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.txs = message.txs.map((e) => QueryRollTxList.toJSON(e));
        }
        if (message.currentHeight !== 0) {
            obj.currentHeight = Math.round(message.currentHeight);
        }
        return obj;
    },
    create(base) {
        return QueryTxListResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseQueryTxListResponse();
        message.rollId = (_a = object.rollId) !== null && _a !== void 0 ? _a : 0;
        message.txs = ((_b = object.txs) === null || _b === void 0 ? void 0 : _b.map((e) => QueryRollTxList.fromPartial(e))) || [];
        message.currentHeight = (_c = object.currentHeight) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseQueryTxsByBlockRequest() {
    return { rollId: 0, block: 0 };
}
export const QueryTxsByBlockRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.rollId !== 0) {
            writer.uint32(8).uint64(message.rollId);
        }
        if (message.block !== 0) {
            writer.uint32(16).int64(message.block);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTxsByBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.rollId = longToNumber(reader.uint64());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.block = longToNumber(reader.int64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rollId: isSet(object.rollId) ? globalThis.Number(object.rollId) : 0,
            block: isSet(object.block) ? globalThis.Number(object.block) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rollId !== 0) {
            obj.rollId = Math.round(message.rollId);
        }
        if (message.block !== 0) {
            obj.block = Math.round(message.block);
        }
        return obj;
    },
    create(base) {
        return QueryTxsByBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryTxsByBlockRequest();
        message.rollId = (_a = object.rollId) !== null && _a !== void 0 ? _a : 0;
        message.block = (_b = object.block) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseQueryTxsByBlockResponse() {
    return { rollId: 0, txs: undefined, currentHeight: 0 };
}
export const QueryTxsByBlockResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.rollId !== 0) {
            writer.uint32(8).uint64(message.rollId);
        }
        if (message.txs !== undefined) {
            QueryRollTxList.encode(message.txs, writer.uint32(18).fork()).join();
        }
        if (message.currentHeight !== 0) {
            writer.uint32(24).int64(message.currentHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTxsByBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.rollId = longToNumber(reader.uint64());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.txs = QueryRollTxList.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.currentHeight = longToNumber(reader.int64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rollId: isSet(object.rollId) ? globalThis.Number(object.rollId) : 0,
            txs: isSet(object.txs) ? QueryRollTxList.fromJSON(object.txs) : undefined,
            currentHeight: isSet(object.currentHeight) ? globalThis.Number(object.currentHeight) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rollId !== 0) {
            obj.rollId = Math.round(message.rollId);
        }
        if (message.txs !== undefined) {
            obj.txs = QueryRollTxList.toJSON(message.txs);
        }
        if (message.currentHeight !== 0) {
            obj.currentHeight = Math.round(message.currentHeight);
        }
        return obj;
    },
    create(base) {
        return QueryTxsByBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryTxsByBlockResponse();
        message.rollId = (_a = object.rollId) !== null && _a !== void 0 ? _a : 0;
        message.txs = (object.txs !== undefined && object.txs !== null)
            ? QueryRollTxList.fromPartial(object.txs)
            : undefined;
        message.currentHeight = (_b = object.currentHeight) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
export const QueryServiceName = "elder.router.Query";
export class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || QueryServiceName;
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.TxList = this.TxList.bind(this);
        this.TxsByBlock = this.TxsByBlock.bind(this);
    }
    Params(request) {
        const data = QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Params", data);
        return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
    }
    TxList(request) {
        const data = QueryTxListRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "TxList", data);
        return promise.then((data) => QueryTxListResponse.decode(new BinaryReader(data)));
    }
    TxsByBlock(request) {
        const data = QueryTxsByBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "TxsByBlock", data);
        return promise.then((data) => QueryTxsByBlockResponse.decode(new BinaryReader(data)));
    }
}
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
